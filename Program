import pandas as pd
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files


uploaded = files.upload()
data = pd.read_csv('data.csv')


data_cleaned = data.drop(columns=["id", "Unnamed: 32"])


label_encoder = LabelEncoder()
data_cleaned["diagnosis"] = label_encoder.fit_transform(data_cleaned["diagnosis"])  # M=1, B=0


X = data_cleaned.drop(columns=["diagnosis"])
y = data_cleaned["diagnosis"]


scaler = StandardScaler()
X = scaler.fit_transform(X)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)


param_dist = {
    'n_estimators': [100, 200, 300, 400, 500],
    'max_depth': [None] + list(range(1, 21)),
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

rf_model = RandomForestClassifier(random_state=42)
rand_search = RandomizedSearchCV(rf_model, param_distributions=param_dist,
                                 n_iter=20, cv=5, random_state=42, n_jobs=-1)
rand_search.fit(X_train, y_train)


y_pred = rand_search.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)


print("Best Parameters:", rand_search.best_params_)
print("Accuracy:", accuracy)
print("Classification Report:\n", classification_rep)


conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Benign', 'Malignant'],
            yticklabels=['Benign', 'Malignant'])
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.title('Confusion Matrix')
plt.show()


features_importance = rand_search.best_estimator_.feature_importances_
features_names = data_cleaned.drop(columns=["diagnosis"]).columns

plt.figure(figsize=(12, 6))
sns.barplot(x=features_importance, y=features_names, palette='viridis')
plt.title('Feature Importance')
plt.xlabel('Importance Score')
plt.ylabel('Features')
plt.tight_layout()
plt.show()
